
MainBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000132  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000908  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000050e  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b9  00000000  00000000  00000eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b2  00000000  00000000  0000106f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013f  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  000015d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000161e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  9e:	0c 94 97 00 	jmp	0x12e	; 0x12e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
void USART_Init()
{

	//Baudrate setzen

	UBRR0H = UBRRH_VALUE;
  a6:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
  aa:	89 e1       	ldi	r24, 0x19	; 25
  ac:	80 93 c4 00 	sts	0x00C4, r24
		
  	UCSR0B = (1<<RXEN0)|(1<<TXEN0);       // UART TX und RX einschalten
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	80 93 c1 00 	sts	0x00C1, r24
  	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00); // Asynchron 8N1 
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 93 c2 00 	sts	0x00C2, r24



}
  bc:	08 95       	ret

000000be <USART_Transmit_Char>:

//Einen Zeichen senden
void USART_Transmit_Char( unsigned char data )
{

	while ( !( UCSR0A & (1<<UDRE0)) ) //warten bisransmitterbuffer frei ist
  be:	90 91 c0 00 	lds	r25, 0x00C0
  c2:	95 ff       	sbrs	r25, 5
  c4:	fc cf       	rjmp	.-8      	; 0xbe <USART_Transmit_Char>
	;

	UDR0 = data; 					  //Schreiben Daten in Buffer und senden
  c6:	80 93 c6 00 	sts	0x00C6, r24
}
  ca:	08 95       	ret

000000cc <USART_Transmit_String>:

//Ein String senden
void USART_Transmit_String (char *s)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
    while (*s)
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <USART_Transmit_String+0xc>
    {   /* so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)" */
        USART_Transmit_Char(*s);
  d4:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_Transmit_Char>
}

//Ein String senden
void USART_Transmit_String (char *s)
{
    while (*s)
  d8:	89 91       	ld	r24, Y+
  da:	88 23       	and	r24, r24
  dc:	d9 f7       	brne	.-10     	; 0xd4 <USART_Transmit_String+0x8>
    {   /* so lange *s != '\0' also ungleich dem "String-Endezeichen(Terminator)" */
        USART_Transmit_Char(*s);
        s++;
    }
}
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	08 95       	ret

000000e4 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	94 e3       	ldi	r25, 0x34	; 52
  e8:	ac e0       	ldi	r26, 0x0C	; 12
  ea:	81 50       	subi	r24, 0x01	; 1
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	a0 40       	sbci	r26, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x6>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x10>
  f4:	00 00       	nop

int main( void )
{

	_delay_ms(500);
     USART_Init();
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	 while(1)
	 {
	 USART_Transmit_Char('a');
  fa:	81 e6       	ldi	r24, 0x61	; 97
  fc:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_Transmit_Char>
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	90 e7       	ldi	r25, 0x70	; 112
 104:	a2 e0       	ldi	r26, 0x02	; 2
 106:	81 50       	subi	r24, 0x01	; 1
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	a0 40       	sbci	r26, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x22>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x2c>
 110:	00 00       	nop

	 _delay_ms(100);
	USART_Transmit_String("Hallo Welt\n");
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 66 00 	call	0xcc	; 0xcc <USART_Transmit_String>
 11a:	8f ef       	ldi	r24, 0xFF	; 255
 11c:	90 e7       	ldi	r25, 0x70	; 112
 11e:	a2 e0       	ldi	r26, 0x02	; 2
 120:	81 50       	subi	r24, 0x01	; 1
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	a0 40       	sbci	r26, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x3c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x46>
 12a:	00 00       	nop
 12c:	e6 cf       	rjmp	.-52     	; 0xfa <main+0x16>

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
