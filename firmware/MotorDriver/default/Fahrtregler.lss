
Fahrtregler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000342  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000f  00800060  00800060  000003b6  2**0
                  ALLOC
  2 .stab         000006b4  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000f5  00000000  00000000  00000b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000034f  00000000  00000000  00000c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000181  00000000  00000000  00000f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cb  00000000  00000000  000010f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  000015c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b0  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000056  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__vector_1>
   4:	78 c0       	rjmp	.+240    	; 0xf6 <__vector_2>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	af 36       	cpi	r26, 0x6F	; 111
  3a:	b1 07       	cpc	r27, r17
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	ce d0       	rcall	.+412    	; 0x1dc <main>
  40:	7e c1       	rjmp	.+764    	; 0x33e <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <__vector_1>:
	}
}

// Interrupt an INT0 auswerten
ISR(INT0_vect)
{
  44:	1f 92       	push	r1
  46:	0f 92       	push	r0
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	0f 92       	push	r0
  4c:	11 24       	eor	r1, r1
  4e:	2f 93       	push	r18
  50:	3f 93       	push	r19
  52:	8f 93       	push	r24
  54:	9f 93       	push	r25
 	cli();
  56:	f8 94       	cli
 	if (flanke_M1 == 1)
  58:	80 91 66 00 	lds	r24, 0x0066
  5c:	81 30       	cpi	r24, 0x01	; 1
  5e:	79 f4       	brne	.+30     	; 0x7e <__vector_1+0x3a>
  	{
   		start_M1 = TCNT1;
  60:	8c b5       	in	r24, 0x2c	; 44
  62:	9d b5       	in	r25, 0x2d	; 45
  64:	90 93 6c 00 	sts	0x006C, r25
  68:	80 93 6b 00 	sts	0x006B, r24
   		MCUCR |= (1<<ISC01); //INT0 auf fallende Flanke stellen
  6c:	85 b7       	in	r24, 0x35	; 53
  6e:	82 60       	ori	r24, 0x02	; 2
  70:	85 bf       	out	0x35, r24	; 53
   		MCUCR &= ~(1<<ISC00);
  72:	85 b7       	in	r24, 0x35	; 53
  74:	8e 7f       	andi	r24, 0xFE	; 254
  76:	85 bf       	out	0x35, r24	; 53
   		flanke_M1 = 0;
  78:	10 92 66 00 	sts	0x0066, r1
  7c:	32 c0       	rjmp	.+100    	; 0xe2 <__stack+0x3>
  	}
   	else
    {
	 	stop_M1 = TCNT1;
  7e:	8c b5       	in	r24, 0x2c	; 44
  80:	9d b5       	in	r25, 0x2d	; 45
  82:	90 93 65 00 	sts	0x0065, r25
  86:	80 93 64 00 	sts	0x0064, r24
		if (stop_M1 > start_M1)
  8a:	20 91 64 00 	lds	r18, 0x0064
  8e:	30 91 65 00 	lds	r19, 0x0065
  92:	80 91 6b 00 	lds	r24, 0x006B
  96:	90 91 6c 00 	lds	r25, 0x006C
  9a:	82 17       	cp	r24, r18
  9c:	93 07       	cpc	r25, r19
  9e:	58 f4       	brcc	.+22     	; 0xb6 <__vector_1+0x72>
		{
	 		impuls_M1 = stop_M1 - start_M1;
  a0:	80 91 64 00 	lds	r24, 0x0064
  a4:	90 91 65 00 	lds	r25, 0x0065
  a8:	20 91 6b 00 	lds	r18, 0x006B
  ac:	30 91 6c 00 	lds	r19, 0x006C
  b0:	82 1b       	sub	r24, r18
  b2:	93 0b       	sbc	r25, r19
  b4:	0c c0       	rjmp	.+24     	; 0xce <__vector_1+0x8a>
     	}
		else
		{
			impuls_M1 = 0xFFFF - start_M1 + stop_M1;
  b6:	80 91 6b 00 	lds	r24, 0x006B
  ba:	90 91 6c 00 	lds	r25, 0x006C
  be:	20 91 64 00 	lds	r18, 0x0064
  c2:	30 91 65 00 	lds	r19, 0x0065
  c6:	80 95       	com	r24
  c8:	90 95       	com	r25
  ca:	82 0f       	add	r24, r18
  cc:	93 1f       	adc	r25, r19
  ce:	90 93 68 00 	sts	0x0068, r25
  d2:	80 93 67 00 	sts	0x0067, r24
		}
		MCUCR |= (1<<ISC00) | (1<<ISC01); //INT0 auf Steigende Flanke stellen (Löst Interrupt bei steigendet Flanke an INT0 aus)
  d6:	85 b7       	in	r24, 0x35	; 53
  d8:	83 60       	ori	r24, 0x03	; 3
  da:	85 bf       	out	0x35, r24	; 53
     	flanke_M1 = 1;  
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 66 00 	sts	0x0066, r24
    } 
	sei();
  e2:	78 94       	sei
 
}
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	3f 91       	pop	r19
  ea:	2f 91       	pop	r18
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <__vector_2>:

// Interrupt an INT1 auswerten
ISR(INT1_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 	cli();
 108:	f8 94       	cli
 	if (flanke_M2 == 1)
 10a:	80 91 69 00 	lds	r24, 0x0069
 10e:	90 91 6a 00 	lds	r25, 0x006A
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	91 05       	cpc	r25, r1
 116:	89 f4       	brne	.+34     	; 0x13a <__vector_2+0x44>
  	{
   		start_M2 = TCNT1;
 118:	8c b5       	in	r24, 0x2c	; 44
 11a:	9d b5       	in	r25, 0x2d	; 45
 11c:	90 93 61 00 	sts	0x0061, r25
 120:	80 93 60 00 	sts	0x0060, r24
   		MCUCR |= (1<<ISC11); //INT1 auf fallende Flanke stellen
 124:	85 b7       	in	r24, 0x35	; 53
 126:	88 60       	ori	r24, 0x08	; 8
 128:	85 bf       	out	0x35, r24	; 53
   		MCUCR &= ~(1<<ISC10);
 12a:	85 b7       	in	r24, 0x35	; 53
 12c:	8b 7f       	andi	r24, 0xFB	; 251
 12e:	85 bf       	out	0x35, r24	; 53
   		flanke_M2 = 0;
 130:	10 92 6a 00 	sts	0x006A, r1
 134:	10 92 69 00 	sts	0x0069, r1
 138:	35 c0       	rjmp	.+106    	; 0x1a4 <__vector_2+0xae>
  	}
   	else
    {
	 	stop_M2 = TCNT1;
 13a:	8c b5       	in	r24, 0x2c	; 44
 13c:	9d b5       	in	r25, 0x2d	; 45
 13e:	90 93 6e 00 	sts	0x006E, r25
 142:	80 93 6d 00 	sts	0x006D, r24
	 	if (stop_M2 > start_M2)
 146:	20 91 6d 00 	lds	r18, 0x006D
 14a:	30 91 6e 00 	lds	r19, 0x006E
 14e:	80 91 60 00 	lds	r24, 0x0060
 152:	90 91 61 00 	lds	r25, 0x0061
 156:	82 17       	cp	r24, r18
 158:	93 07       	cpc	r25, r19
 15a:	58 f4       	brcc	.+22     	; 0x172 <__vector_2+0x7c>
		{
	 		impuls_M2 = stop_M2 - start_M2;
 15c:	80 91 6d 00 	lds	r24, 0x006D
 160:	90 91 6e 00 	lds	r25, 0x006E
 164:	20 91 60 00 	lds	r18, 0x0060
 168:	30 91 61 00 	lds	r19, 0x0061
 16c:	82 1b       	sub	r24, r18
 16e:	93 0b       	sbc	r25, r19
 170:	0c c0       	rjmp	.+24     	; 0x18a <__vector_2+0x94>
     	}
		else
		{
			impuls_M2 = 0xFFFF - start_M2 + stop_M2;
 172:	80 91 60 00 	lds	r24, 0x0060
 176:	90 91 61 00 	lds	r25, 0x0061
 17a:	20 91 6d 00 	lds	r18, 0x006D
 17e:	30 91 6e 00 	lds	r19, 0x006E
 182:	80 95       	com	r24
 184:	90 95       	com	r25
 186:	82 0f       	add	r24, r18
 188:	93 1f       	adc	r25, r19
 18a:	90 93 63 00 	sts	0x0063, r25
 18e:	80 93 62 00 	sts	0x0062, r24
		}
     	MCUCR |= (1<<ISC10) | (1<<ISC11); //INT1 auf Steigende Flanke stellen (Löst Interrupt bei steigendet Flanke an INT1 aus)
 192:	85 b7       	in	r24, 0x35	; 53
 194:	8c 60       	ori	r24, 0x0C	; 12
 196:	85 bf       	out	0x35, r24	; 53
     	flanke_M2 = 1;  
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	90 93 6a 00 	sts	0x006A, r25
 1a0:	80 93 69 00 	sts	0x0069, r24
    } 
 	sei();
 1a4:	78 94       	sei
}
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	3f 91       	pop	r19
 1ac:	2f 91       	pop	r18
 1ae:	0f 90       	pop	r0
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	0f 90       	pop	r0
 1b4:	1f 90       	pop	r1
 1b6:	18 95       	reti

000001b8 <init_digital>:

void init_digital(void)
/*Diese Funktion initialisiert die verwendeten Ports*/
{
  	DDRB |= (1<<DDB0) | (1<<DDB1);  
 1b8:	87 b3       	in	r24, 0x17	; 23
 1ba:	83 60       	ori	r24, 0x03	; 3
 1bc:	87 bb       	out	0x17, r24	; 23
  	DDRD |= (1<<DDD1) | (1<<DDD6);
 1be:	81 b3       	in	r24, 0x11	; 17
 1c0:	82 64       	ori	r24, 0x42	; 66
 1c2:	81 bb       	out	0x11, r24	; 17
}
 1c4:	08 95       	ret

000001c6 <init_timer>:

// Timer initialisieren
void init_timer(void)
{
	//Timer 1 (16Bit)
 	TCCR1B |= (1<<CS11);  //Vorteiler auf CPU Takt/8
 1c6:	8e b5       	in	r24, 0x2e	; 46
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	8e bd       	out	0x2e, r24	; 46
}
 1cc:	08 95       	ret

000001ce <init_interrupt>:


// Interrupt auf INT0 und INT1 initialisieren
void init_interrupt(void)
{
	GIMSK  |= (1<<INT0) | (1<<INT1); //Interrupt von INT0 auf Enable
 1ce:	8b b7       	in	r24, 0x3b	; 59
 1d0:	80 6c       	ori	r24, 0xC0	; 192
 1d2:	8b bf       	out	0x3b, r24	; 59
 	MCUCR |= (1<<ISC00) | (1<<ISC01) | (1<<ISC10) | (1<<ISC11); //INT0 auf Steigende Flanke stellen (Löst Interrupt bei steigendet Flanke an INT0 aus
 1d4:	85 b7       	in	r24, 0x35	; 53
 1d6:	8f 60       	ori	r24, 0x0F	; 15
 1d8:	85 bf       	out	0x35, r24	; 53
}
 1da:	08 95       	ret

000001dc <main>:
volatile uint16_t impuls_M2;
volatile uint16_t flanke_M2;

int main(void)
{
	init_interrupt();
 1dc:	f8 df       	rcall	.-16     	; 0x1ce <init_interrupt>
    init_digital();
 1de:	ec df       	rcall	.-40     	; 0x1b8 <init_digital>
	init_timer();
 1e0:	f2 df       	rcall	.-28     	; 0x1c6 <init_timer>
	init_pwm();	
 1e2:	a4 d0       	rcall	.+328    	; 0x32c <init_pwm>

    //PD1 und PB1 richtung von M2 pwm2  PB2 - Geschwindigkeit
	//PD6 und PB0 richtung von M1 pwm1  PD5 - Geschwindigkeit
	 

	sei(); //Interrupts aktivieren
 1e4:	78 94       	sei
	  }
	  if ((impuls_M1 > 445) & (impuls_M1 < 700))
	  {
//******************************************
//beim Prototypen OCR0A auf OCR0B aendern
	    OCR0A = 700 - impuls_M1;
 1e6:	5c eb       	ldi	r21, 0xBC	; 188
  
	  if ((impuls_M1 > 700) & (impuls_M1 < 800))
	  {
//******************************************
//beim Prototypen OCR0A auf OCR0B aendern
	    OCR0A = 0x5A;
 1e8:	4a e5       	ldi	r20, 0x5A	; 90
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	87 ee       	ldi	r24, 0xE7	; 231
 1ec:	93 e0       	ldi	r25, 0x03	; 3
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <main+0x12>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0x18>
 1f4:	00 00       	nop
	{
	//*****************************TODO test delay**********************
	_delay_ms(1);

	//----------- Motor 1 Steuerung START -------------  
	  if(impuls_M1 == 0)
 1f6:	80 91 67 00 	lds	r24, 0x0067
 1fa:	90 91 68 00 	lds	r25, 0x0068
 1fe:	00 97       	sbiw	r24, 0x00	; 0
 200:	11 f4       	brne	.+4      	; 0x206 <main+0x2a>
	  {
		
	    PORTB &= ~(1<<PB1); 
 202:	c1 98       	cbi	0x18, 1	; 24
	    PORTD &= ~(1<<PD1); 
 204:	91 98       	cbi	0x12, 1	; 18
  
	  }
	  if ((impuls_M1 > 445) & (impuls_M1 < 700))
 206:	80 91 67 00 	lds	r24, 0x0067
 20a:	90 91 68 00 	lds	r25, 0x0068
 20e:	20 91 67 00 	lds	r18, 0x0067
 212:	30 91 68 00 	lds	r19, 0x0068
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	2c 3b       	cpi	r18, 0xBC	; 188
 21a:	36 07       	cpc	r19, r22
 21c:	68 f4       	brcc	.+26     	; 0x238 <main+0x5c>
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	8e 3b       	cpi	r24, 0xBE	; 190
 222:	92 07       	cpc	r25, r18
 224:	48 f0       	brcs	.+18     	; 0x238 <main+0x5c>
	  {
//******************************************
//beim Prototypen OCR0A auf OCR0B aendern
	    OCR0A = 700 - impuls_M1;
 226:	80 91 67 00 	lds	r24, 0x0067
 22a:	90 91 68 00 	lds	r25, 0x0068
 22e:	65 2f       	mov	r22, r21
 230:	68 1b       	sub	r22, r24
 232:	66 bf       	out	0x36, r22	; 54
//******************************************
	    PORTB |= (1<<PB1); 
 234:	c1 9a       	sbi	0x18, 1	; 24
	    PORTD &= ~(1<<PD1); 
 236:	91 98       	cbi	0x12, 1	; 18
	   }
  
	  if ((impuls_M1 > 800) & (impuls_M1 < 1055))
 238:	80 91 67 00 	lds	r24, 0x0067
 23c:	90 91 68 00 	lds	r25, 0x0068
 240:	20 91 67 00 	lds	r18, 0x0067
 244:	30 91 68 00 	lds	r19, 0x0068
 248:	64 e0       	ldi	r22, 0x04	; 4
 24a:	2f 31       	cpi	r18, 0x1F	; 31
 24c:	36 07       	cpc	r19, r22
 24e:	60 f4       	brcc	.+24     	; 0x268 <main+0x8c>
 250:	23 e0       	ldi	r18, 0x03	; 3
 252:	81 32       	cpi	r24, 0x21	; 33
 254:	92 07       	cpc	r25, r18
 256:	40 f0       	brcs	.+16     	; 0x268 <main+0x8c>
	  {
//******************************************
//beim Prototypen OCR0A auf OCR0B aendern
	    OCR0A =  impuls_M1 - 800;
 258:	80 91 67 00 	lds	r24, 0x0067
 25c:	90 91 68 00 	lds	r25, 0x0068
 260:	80 52       	subi	r24, 0x20	; 32
 262:	86 bf       	out	0x36, r24	; 54
//******************************************
	    PORTB &= ~(1<<PB1);
 264:	c1 98       	cbi	0x18, 1	; 24
	    PORTD |= (1<<PD1);
 266:	91 9a       	sbi	0x12, 1	; 18
	  }
  
	  if ((impuls_M1 > 700) & (impuls_M1 < 800))
 268:	80 91 67 00 	lds	r24, 0x0067
 26c:	90 91 68 00 	lds	r25, 0x0068
 270:	20 91 67 00 	lds	r18, 0x0067
 274:	30 91 68 00 	lds	r19, 0x0068
 278:	63 e0       	ldi	r22, 0x03	; 3
 27a:	20 32       	cpi	r18, 0x20	; 32
 27c:	36 07       	cpc	r19, r22
 27e:	38 f4       	brcc	.+14     	; 0x28e <main+0xb2>
 280:	22 e0       	ldi	r18, 0x02	; 2
 282:	8d 3b       	cpi	r24, 0xBD	; 189
 284:	92 07       	cpc	r25, r18
 286:	18 f0       	brcs	.+6      	; 0x28e <main+0xb2>
	  {
//******************************************
//beim Prototypen OCR0A auf OCR0B aendern
	    OCR0A = 0x5A;
 288:	46 bf       	out	0x36, r20	; 54
//******************************************
	    PORTB |= (1<<PB1); 
 28a:	c1 9a       	sbi	0x18, 1	; 24
	    PORTD |= (1<<PD1); 
 28c:	91 9a       	sbi	0x12, 1	; 18
	  }		 
	//----------- Motor 1 Steuerung ENDE -------------
		
	//----------- Motor 2 Steuerung START -------------  
	  if(impuls_M2 == 0)
 28e:	80 91 62 00 	lds	r24, 0x0062
 292:	90 91 63 00 	lds	r25, 0x0063
 296:	00 97       	sbiw	r24, 0x00	; 0
 298:	11 f4       	brne	.+4      	; 0x29e <main+0xc2>
	  {
		
	    PORTB &= ~(1<<PB0); 
 29a:	c0 98       	cbi	0x18, 0	; 24
	    PORTD &= ~(1<<PD6); 
 29c:	96 98       	cbi	0x12, 6	; 18
  
	  }
	  if ((impuls_M2 > 445) & (impuls_M2 < 700))
 29e:	80 91 62 00 	lds	r24, 0x0062
 2a2:	90 91 63 00 	lds	r25, 0x0063
 2a6:	20 91 62 00 	lds	r18, 0x0062
 2aa:	30 91 63 00 	lds	r19, 0x0063
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	2c 3b       	cpi	r18, 0xBC	; 188
 2b2:	36 07       	cpc	r19, r22
 2b4:	68 f4       	brcc	.+26     	; 0x2d0 <main+0xf4>
 2b6:	21 e0       	ldi	r18, 0x01	; 1
 2b8:	8e 3b       	cpi	r24, 0xBE	; 190
 2ba:	92 07       	cpc	r25, r18
 2bc:	48 f0       	brcs	.+18     	; 0x2d0 <main+0xf4>
	  {
//******************************************
//beim Prototypen OCR0B auf OCR0A aendern
	    OCR0B = 700 - impuls_M2;
 2be:	80 91 62 00 	lds	r24, 0x0062
 2c2:	90 91 63 00 	lds	r25, 0x0063
 2c6:	65 2f       	mov	r22, r21
 2c8:	68 1b       	sub	r22, r24
 2ca:	6c bf       	out	0x3c, r22	; 60
//******************************************
	    PORTB |= (1<<PB0); 
 2cc:	c0 9a       	sbi	0x18, 0	; 24
	    PORTD &= ~(1<<PD6); 
 2ce:	96 98       	cbi	0x12, 6	; 18
	   }
  
	  if ((impuls_M2 > 800) & (impuls_M2 < 1055))
 2d0:	80 91 62 00 	lds	r24, 0x0062
 2d4:	90 91 63 00 	lds	r25, 0x0063
 2d8:	20 91 62 00 	lds	r18, 0x0062
 2dc:	30 91 63 00 	lds	r19, 0x0063
 2e0:	64 e0       	ldi	r22, 0x04	; 4
 2e2:	2f 31       	cpi	r18, 0x1F	; 31
 2e4:	36 07       	cpc	r19, r22
 2e6:	60 f4       	brcc	.+24     	; 0x300 <main+0x124>
 2e8:	23 e0       	ldi	r18, 0x03	; 3
 2ea:	81 32       	cpi	r24, 0x21	; 33
 2ec:	92 07       	cpc	r25, r18
 2ee:	40 f0       	brcs	.+16     	; 0x300 <main+0x124>
	  {
//******************************************
//beim Prototypen OCR0B auf OCR0A aendern
	    OCR0B =  impuls_M2 - 800;
 2f0:	80 91 62 00 	lds	r24, 0x0062
 2f4:	90 91 63 00 	lds	r25, 0x0063
 2f8:	80 52       	subi	r24, 0x20	; 32
 2fa:	8c bf       	out	0x3c, r24	; 60
//******************************************
	    PORTB &= ~(1<<PB0);
 2fc:	c0 98       	cbi	0x18, 0	; 24
	    PORTD |= (1<<PD6);
 2fe:	96 9a       	sbi	0x12, 6	; 18
	  }
  
	  if ((impuls_M2 > 700) & (impuls_M2 < 800))
 300:	80 91 62 00 	lds	r24, 0x0062
 304:	90 91 63 00 	lds	r25, 0x0063
 308:	20 91 62 00 	lds	r18, 0x0062
 30c:	30 91 63 00 	lds	r19, 0x0063
 310:	63 e0       	ldi	r22, 0x03	; 3
 312:	20 32       	cpi	r18, 0x20	; 32
 314:	36 07       	cpc	r19, r22
 316:	08 f0       	brcs	.+2      	; 0x31a <main+0x13e>
 318:	68 cf       	rjmp	.-304    	; 0x1ea <main+0xe>
 31a:	22 e0       	ldi	r18, 0x02	; 2
 31c:	8d 3b       	cpi	r24, 0xBD	; 189
 31e:	92 07       	cpc	r25, r18
 320:	08 f4       	brcc	.+2      	; 0x324 <main+0x148>
 322:	63 cf       	rjmp	.-314    	; 0x1ea <main+0xe>
	  {
//******************************************
//beim Prototypen OCR0B auf OCR0A aendern

	    OCR0B = 0x5A;        
 324:	4c bf       	out	0x3c, r20	; 60
//******************************************
	    PORTB |= (1<<PB0); 
 326:	c0 9a       	sbi	0x18, 0	; 24
	    PORTD |= (1<<PD6); 
 328:	96 9a       	sbi	0x12, 6	; 18
 32a:	5f cf       	rjmp	.-322    	; 0x1ea <main+0xe>

0000032c <init_pwm>:
void init_pwm (void)
{  
  
  // Timer 0 PWM Init

  TCCR0A = (1 << WGM00)
 32c:	83 ea       	ldi	r24, 0xA3	; 163
 32e:	80 bf       	out	0x30, r24	; 48
  		 | (1 << WGM01)
		 | (1 << COM0A1)
		 | (1 << COM0B1);
  TCCR0B = (0 << WGM02)
 330:	83 e0       	ldi	r24, 0x03	; 3
 332:	83 bf       	out	0x33, r24	; 51
		 | (0 << CS02);


  // OC0A PWM Port

  DDRB   |= (1 << PB2);
 334:	ba 9a       	sbi	0x17, 2	; 23

  OCR0A = 0;
 336:	16 be       	out	0x36, r1	; 54


  // OC0B PWM Port
  
  DDRD   |= (1 << PD5);
 338:	8d 9a       	sbi	0x11, 5	; 17

  OCR0B = 0;
 33a:	1c be       	out	0x3c, r1	; 60

  DDRB   |= (1 << PB4);
  		 
  OCR1BL = 0;
*/
}
 33c:	08 95       	ret

0000033e <_exit>:
 33e:	f8 94       	cli

00000340 <__stop_program>:
 340:	ff cf       	rjmp	.-2      	; 0x340 <__stop_program>
